#include<bits/stdc++.h>
using namespace std;
vector<int> color;

bool bipartite(int vertex, vector<int> adjacent[])
{
    vector<int> color(vertex,-1);
    queue<pair<int,int>> q;
    for(int i=0;i<vertex;++i)
    {
        if(color[i]==-1)
        {
            q.push({i,0});
            color[i]=0;
            while(!q.empty())
            {
                pair<int,int> p=q.front();
                q.pop();
                int first=p.first;
                int second=p.second;
                vector<int>:: iterator ip;
                for(ip=adjacent[first].begin();ip!=adjacent[first].end();++ip)
                {
                    if(color[*ip]==second)
                        return false;
                    if(color[*ip]==-1)
                    {
                        color[*ip]=(second)?0:1;
                        q.push({*ip,color[*ip]});
                    }
                }
            }
        }
    }
    return true;

}

int main()
{
    int vertex,edge; cin>>vertex>>edge;
    int a,b;
    vector<int> adjacent[vertex];
    while(edge--)
    {
        cin>>a>>b;
        adjacent[a].push_back(b);
        adjacent[b].push_back(a);
    }
    bool res=bipartite(vertex,adjacent);
    cout<<(res?"YES":"NO")<<endl;
}
